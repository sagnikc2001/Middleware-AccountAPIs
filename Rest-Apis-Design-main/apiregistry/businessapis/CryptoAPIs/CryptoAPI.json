{
  "openapi": "3.0.0",
  "info": {
    "title": "MW Crypto APIs",
    "contact": {},
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://mw-api-3scale-apicast-staging.apps.com:443/api/crypto",
      "variables": {}
    }
  ],
  "paths": {
    "/EncryptMessage": {
      "post": {
        "tags": [
          "Crypto APIs Stage"
        ],
        "summary": "EncryptMessage",
        "operationId": "EncryptMessage",
        "parameters": [
          {
            "name": "Security",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "$ref": "#/components/schemas/wsse_Security"
            }
          },
          {
            "name": "ServiceHeader",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "$ref": "#/components/schemas/header_ServiceHeader"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EncryptMessageRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved the response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EncryptMessageResponse"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/GetDigitalSignature": {
      "post": {
        "tags": [
          "Crypto APIs"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "JWT bearer token",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ServiceHeader",
            "in": "header",
            "description": "having channel details , locale",
            "required": true,
            "style": "simple",
            "schema": {
              "$ref": "../../commonschemas/header.json#/ServiceHeader"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDigitalSignatureRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved the response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDigitalSignatureResponse"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDigitalSignatureResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized Request"
          },
          "404": {
            "description": "404 API Not Found"
          },
          "405": {
            "description": "405 Method Not Allowed"
          },
          "429": {
            "description": "429 Too Many Requests"
          },
          "500": {
            "description": "500 Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDigitalSignatureResponse"
                }
              }
            }
          },
          "503": {
            "description": "503 Service Unavailable"
          }
        },
        "deprecated": false
      }
    },
    "/GenerateUniqueReference": {
      "post": {
        "tags": [
          "Crypto APIs Stage"
        ],
        "summary": "GenerateUniqueReference",
        "operationId": "GenerateUniqueReference",
        "parameters": [
          {
            "name": "Security",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "$ref": "#/components/schemas/wsse_Security"
            }
          },
          {
            "name": "ServiceHeader",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "$ref": "#/components/schemas/header_ServiceHeader"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GenerateUniqueReferenceRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved the response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenerateUniqueReferenceResponse"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "components": {
    "schemas": {
      "tns_EncryptMessageRequest": {
        "title": "tns_EncryptMessageRequest",
        "type": "object",
        "properties": {
          "nonce": {
            "type": "string",
            "description": "A one-time use nonce generated by issuer"
          },
          "nonceSignature": {
            "type": "string",
            "description": "The device and account specific signature of the nonce generated by issuer"
          },
          "cipheredData": {
            "type": "string",
            "description": "ciphered encrypted info"
          },
          "networkName": {
            "type": "string",
            "description": "Valid Network names: MasterCard, Visa, mada."
          },
          "primaryAccountNumberPrefix": {
            "type": "string",
            "description": "Account Number Prefix"
          },
          "productType": {
            "type": "string",
            "description": "Product Type"
          },
          "source": {
            "type": "string",
            "description": "source"
          },
          "certificates": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of certificates returned by issuer"
          }
        },
        "description": ""
      },
      "tns_EncryptMessageResponse": {
        "title": "tns_EncryptMessageResponse",
        "type": "object",
        "properties": {
          "success": {
            "allOf": [
              {
                "$ref": "#/components/schemas/tns_cryptoServiceSuccessType"
              }
            ]
          },
          "fault": {
            "allOf": [
              {
                "$ref": "#/components/schemas/fault_FaultType"
              }
            ]
          }
        },
        "description": ""
      },
      "tns_cryptoServiceSuccessType": {
        "title": "tns_cryptoServiceSuccessType",
        "type": "object",
        "properties": {
          "encryptedPassData": {
            "type": "string"
          },
          "wrappedKey": {
            "type": "string"
          },
          "activationCode": {
            "type": "string"
          }
        },
        "description": ""
      },
      "GetDigitalSignatureRequestType": {
        "title": "GetDigitalSignatureRequest",
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "A unique Transaction ID by SIP. This\r\n        \t\t\t\t\t\t\tis logged and returned in the\r\n        \t\t\t\t\t\t\tresponse for correlation. Should be\r\n        \t\t\t\t\t\t\tunique for the SIP during the\r\n        \t\t\t\t\t\t\tcalendar day."
          },
          "userConsentObtained": {
            "type": "boolean",
            "description": "Should be set to 1 (one). SIP should\r\n        \t\t\t\t\t\t\tprominently inform the signatory /\r\n        \t\t\t\t\t\t\tuser on:  Passing the signing\r\n        \t\t\t\t\t\t\trequest to OSP.  If SIP is an RKA,\r\n        \t\t\t\t\t\t\tpassing the KYC information to OSP\r\n        \t\t\t\t\t\t\tfor the purpose of signing. By\r\n        \t\t\t\t\t\t\tsetting this value, SIP undertakes\r\n        \t\t\t\t\t\t\tlegally that, they have informed the\r\n        \t\t\t\t\t\t\tuser and taken explicit consent for\r\n        \t\t\t\t\t\t\tthe transaction including the data\r\n        \t\t\t\t\t\t\tsharing related information."
          },
          "document": {
            "$ref": "#/components/schemas/DocumentType",
            "description": "Contains one sub-element with\r\n        \t\t\t\t\t\t\tDocument Hash"
          },
          "signatoryInfo": {
            "$ref": "#/components/schemas/SignatoryInfoType",
            "description": "Root element of the signing "
          },
          "timestamp": {
            "type": "string",
            "description": "Request timestamp in ISO format. The\r\n        \t\t\t\t\t\t\tvalue should be in Arabia Standard\r\n        \t\t\t\t\t\t\tTime (AST), and should be within the\r\n        \t\t\t\t\t\t\trange of maximum 30 minutes\r\n        \t\t\t\t\t\t\tdeviation to support out of sync\r\n        \t\t\t\t\t\t\tserver clocks.",
            "format": "date-time"
          },
          "reason": {
            "type": "string",
            "description": "Reason for signing on this document."
          },
          "cosign": {
            "type": "boolean",
            "description": "Allows multiple signing on the document. Pass it as true."
          }
        },
        "description": ""
      },
      "GetDigitalSignatureResponseType": {
        "title": "GetDigitalSignatureResponse",
        "type": "object",
        "properties": {
          "success": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DigitalSignatureSuccessType"
              }
            ]
          },
          "fault": {
            "$ref": "../../commonschemas/fault.json#/FaultType"
          }
        },
        "description": ""
      },
      "DigitalSignatureSuccessType": {
        "required": [
          "responseCode",
          "transactionId",
          "documentSignature",
          "signedDocContent",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "description": "This contains a unique response code\r\n        \t\t\t\t\t\tprovided by OSP. This is a unique id for\r\n        \t\t\t\t\t\tthe transaction making the transaction\r\n        \t\t\t\t\t\ttraceable, and SIP is expected to store\r\n        \t\t\t\t\t\tthis code in their audit log."
          },
          "transactionId": {
            "type": "string",
            "description": "The Transaction ID provided by SIP in\r\n        \t\t\t\t\t\tthe request."
          },
          "documentSignature": {
            "$ref": "#/components/schemas/DocumentSigantureType"
          },
          "signedDocContent": {
            "type": "string",
            "description": "Base64 string of the signed document."
          },
          "timestamp": {
            "type": "string",
            "description": "Will contain the response timestamp in\r\n        \t\t\t\t\t\tISO format.",
            "format": "date-time"
          }
        },
        "description": ""
      },
      "DocumentSigantureType": {
        "title": "DocumentSigantureType",
        "required": [
          "id",
          "digitalSignature"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Contains the corresponding ID to the\r\n        \t\t\t\t\t\tInput Hash received"
          },
          "digitalSignature": {
            "type": "string",
            "description": "Signature data in PKCS7 format"
          }
        },
        "description": ""
      },
      "DocumentType": {
        "title": "DocumentType",
        "type": "object",
        "properties": {
          "inputHash": {
            "$ref": "#/components/schemas/InputHashType",
            "description": "Contains the value of Document Hash,\r\n        \t\t\t\t\t\twhich has to be signed."
          },
          "docContent": {
            "type": "string",
            "description": "Base64 string of the document that has\r\n        \t\t\t\t\t\tto be signed."
          },
          "signedBy": {
            "type": "string",
            "description": "Name of the person who is signing the\r\n        \t\t\t\t\t\tdocument."
          },
          "pageTobeSigned": {
            "$ref": "#/components/schemas/PageTobeSignedType",
            "description": "All: To sign all the pages of the pdf.\r\n        \t\t\t\t\t\tEven:To sign all even pages of the pdf.\r\n        \t\t\t\t\t\tOdd:To sign all odd pages of the pdf.\r\n        \t\t\t\t\t\tLast:To sign last page of the pdf.\r\n        \t\t\t\t\t\tFirst:To sign only first page of the\r\n        \t\t\t\t\t\tpdf. PageLevel: To specify page level\r\n        \t\t\t\t\t\tco-ordinates.\r\n        \t\t\t\t\t\tEx.1-125,725,245,785;1-425,100,595,210\r\n        \t\t\t\t\t\tSpecify:To sign specific page numbers of\r\n        \t\t\t\t\t\tthe pdf. Ex. “2,3”"
          },
          "coordinates": {
            "$ref": "#/components/schemas/CoordinatesType",
            "description": "TopLeft: To place the signature\r\n        \t\t\t\t\t\tappearance in Top Left. TopMiddle: To\r\n        \t\t\t\t\t\tplace the signature appearance in Top\r\n        \t\t\t\t\t\tMiddle. CenterLeft:To place the\r\n        \t\t\t\t\t\tsignature appearance in Center Left.\r\n        \t\t\t\t\t\tCenterMiddle:To place the signature\r\n        \t\t\t\t\t\tappearance in Center Middle.\r\n        \t\t\t\t\t\tCenterRight:To place the signature\r\n        \t\t\t\t\t\tappearance in Center Right.\r\n        \t\t\t\t\t\tBottomLeft:To place the signature\r\n        \t\t\t\t\t\tappearance in Bottom Left.\r\n        \t\t\t\t\t\tBottomMiddle:To place the signature\r\n        \t\t\t\t\t\tappearance in Bottom Middle.\r\n        \t\t\t\t\t\tBottomRight:To place the signature\r\n        \t\t\t\t\t\tappearance in Bottom Right."
          },
          "pagenumbers": {
            "type": "string",
            "description": "coordinates to place signature\r\n        \t\t\t\t\t\tpanel,applicable only when the\r\n        \t\t\t\t\t\tPageTobeSigned value in \"pagelevel\" or\r\n        \t\t\t\t\t\t“specify” else null"
          },
          "pageLevelCoordinates": {
            "type": "string",
            "description": "Coordinates and page numbers in specific\r\n        \t\t\t\t\t\tformat, Applicable only when\r\n        \t\t\t\t\t\tPageTobeSigned is “pageLevel”."
          },
          "appearanceType": {
            "$ref": "#/components/schemas/AppearanceType",
            "description": "Appreance type for signature\r\n        \t\t\t\t\t\tRUN_DIRECTION_LTR:for Arabic\r\n        \t\t\t\t\t\tRUN_DIRECTION_RTL:for English"
          },
          "backgroundImage": {
            "$ref": "#/components/schemas/BackgroundImageType",
            "description": "NO_IMAGE No: Image required EMDHA_LOGO:\r\n        \t\t\t\t\t\tEMDHA Image CUSTOM_LOGO:Custom Image"
          },
          "appearanceBackgroundImage": {
            "type": "string",
            "description": "Base64 image string for appearance\r\n        \t\t\t\t\t\tbackground. (If BackgroundImage is set\r\n        \t\t\t\t\t\tto CUSTOM_LOGO)"
          }
        },
        "description": ""
      },
      "InputHashType": {
        "title": "InputHashType",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The index number of the document. Should\r\n        \t\t\t\t\t\tstart with one (1). Maximum 10. Should\r\n        \t\t\t\t\t\tbe sequential. Shall not repeat."
          },
          "hashAlgorithm": {
            "type": "string",
            "description": "Should be fixed to “SHA256”"
          },
          "responseSigType": {
            "type": "string",
            "description": "Should be fixed to “PKCS7”"
          },
          "documentHash": {
            "type": "string",
            "description": "Document Hash in Hex"
          }
        },
        "description": ""
      },
      "SignatoryInfoType": {
        "title": "SignatoryInfoType",
        "type": "object",
        "properties": {
          "kycData": {
            "$ref": "#/components/schemas/KycDataType",
            "description": "KYC information"
          },
          "photo": {
            "type": "string",
            "description": "Contains the photograph of the user, Base 64 encoded JPEG format photograph of the user"
          }
        },
        "description": ""
      },
      "KycDataType": {
        "title": "KycDataType",
        "type": "object",
        "properties": {
          "kycId": {
            "type": "string",
            "description": "The unique ID of the signatory / user,\r\n        \t\t\t\t\t\tas per the reliable KYC agency database.\r\n        \t\t\t\t\t\tFor example, if bank is initiating the\r\n        \t\t\t\t\t\ttransaction along with KYC information,\r\n        \t\t\t\t\t\tthis should the bank’s customer ID."
          },
          "englishName": {
            "type": "string",
            "description": "English Name as per the KYC database.\r\n        \t\t\t\t\t\tConcatenated value of 4 parts of name."
          },
          "arabicName": {
            "type": "string",
            "description": "Arabic Name as per the KYC database.\r\n        \t\t\t\t\t\tConcatenated value of 4 parts of name."
          },
          "mobile": {
            "$ref": "../../commonschemas/schemas.json#/MobileNumberOptional",
            "description": "Mobile number as per the KYC database"
          },
          "email": {
            "$ref": "../../commonschemas/schemas.json#/EmailAddressOptional",
            "description": "Email number as per the KYC database"
          },
          "address": {
            "type": "string",
            "description": "Address as per the KYC database"
          },
          "regionProvince": {
            "type": "string",
            "description": "Region / Province as per the KYC\r\n        \t\t\t\t\t\tdatabase"
          },
          "country": {
            "type": "string",
            "description": "Should be fixed to “SA”"
          }
        },
        "description": ""
      },
      "tns_GenerateUniqueReferenceRequest": {
        "title": "tns_GenerateUniqueReferenceRequest",
        "required": [
          "refType",
          "shortCIF"
        ],
        "type": "object",
        "properties": {
          "refType": {
            "type": "string"
          },
          "shortCIF": {
            "pattern": "([0-9]){8}|([0]){1}",
            "type": "string"
          }
        },
        "description": ""
      },
      "tns_GenerateUniqueReferenceResponse": {
        "title": "tns_GenerateUniqueReferenceResponse",
        "type": "object",
        "properties": {
          "success": {
            "allOf": [
              {
                "$ref": "#/components/schemas/tns_UniqueReferenceType"
              }
            ]
          },
          "fault": {
            "allOf": [
              {
                "$ref": "#/components/schemas/fault_FaultType"
              }
            ]
          }
        },
        "description": ""
      },
      "tns_UniqueReferenceType": {
        "title": "tns_UniqueReferenceType",
        "required": [
          "refNumber"
        ],
        "type": "object",
        "properties": {
          "refNumber": {
            "type": "string"
          }
        },
        "description": ""
      },
      "wsse_Security": {
        "title": "wsse_Security",
        "required": [
          "UsernameToken"
        ],
        "type": "object",
        "properties": {
          "UsernameToken": {
            "allOf": [
              {
                "$ref": "#/components/schemas/wsse_UsernameToken"
              }
            ]
          }
        },
        "description": ""
      },
      "header_ServiceHeader": {
        "title": "header_ServiceHeader",
        "required": [
          "loggerContext",
          "transactionCode",
          "retryTransaction",
          "tellerId",
          "terminalId",
          "workstationId",
          "override",
          "correction",
          "supervisor",
          "supervisorId",
          "overrideCode",
          "employeeId",
          "branchId",
          "functionId",
          "channelId",
          "bancsPwd",
          "languageCode"
        ],
        "type": "object",
        "properties": {
          "loggerContext": {
            "type": "string"
          },
          "transactionCode": {
            "type": "string"
          },
          "retryTransaction": {
            "type": "boolean"
          },
          "tellerId": {
            "type": "string"
          },
          "terminalId": {
            "type": "string"
          },
          "workstationId": {
            "type": "string"
          },
          "override": {
            "type": "boolean"
          },
          "correction": {
            "type": "string"
          },
          "supervisor": {
            "type": "string"
          },
          "supervisorId": {
            "type": "string"
          },
          "overrideCode": {
            "type": "string"
          },
          "employeeId": {
            "type": "string"
          },
          "branchId": {
            "type": "string"
          },
          "functionId": {
            "type": "string"
          },
          "channelId": {
            "type": "string"
          },
          "bancsPwd": {
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          },
          "authenticationType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/header_authenticationType"
              },
              {
                "description": "Can be: NONE, OTP, TOKEN"
              }
            ]
          },
          "IvrTransactionID": {
            "type": "string"
          }
        },
        "description": ""
      },
      "fault_FaultType": {
        "title": "fault_FaultType",
        "required": [
          "number",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string"
          },
          "retryAfter": {
            "type": "string"
          },
          "system": {
            "type": "string"
          },
          "nativeError": {
            "type": "string"
          },
          "nativeDescription": {
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_PostalAddress": {
        "title": "Q1_PostalAddress",
        "type": "object",
        "properties": {
          "addressLine1": {
            "maxLength": 70,
            "minLength": 0,
            "type": "string"
          },
          "addressLine2": {
            "maxLength": 70,
            "minLength": 0,
            "type": "string"
          },
          "addressLine3": {
            "maxLength": 70,
            "minLength": 0,
            "type": "string"
          },
          "city": {
            "maxLength": 35,
            "minLength": 0,
            "type": "string"
          },
          "region": {
            "maxLength": 35,
            "minLength": 0,
            "type": "string"
          },
          "postalCode": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string"
          },
          "country": {
            "pattern": "([A-Z]{2,2})|()",
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_Money": {
        "title": "Q1_Money",
        "required": [
          "isoCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "isoCurrencyCode": {
            "pattern": "[A-Z]{3,3}",
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_MoneyOptional": {
        "title": "Q1_MoneyOptional",
        "required": [
          "isoCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "isoCurrencyCode": {
            "pattern": "([A-Z]{3,3})|()",
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_Cursor": {
        "title": "Q1_Cursor",
        "required": [
          "position",
          "noOfRows"
        ],
        "type": "object",
        "properties": {
          "position": {
            "minimum": 0.0,
            "type": "integer",
            "format": "int32"
          },
          "noOfRows": {
            "minimum": 0.0,
            "type": "integer",
            "format": "int32"
          }
        },
        "description": ""
      },
      "Q1_Biller": {
        "title": "Q1_Biller",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        },
        "description": ""
      },
      "Q1_DocumentType": {
        "title": "Q1_DocumentType",
        "required": [
          "documentId",
          "documentSubId",
          "totalPages",
          "documentType",
          "archivedDate",
          "page"
        ],
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string"
          },
          "documentSubId": {
            "minimum": 0.0,
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "minimum": 0.0,
            "type": "integer",
            "format": "int32"
          },
          "documentType": {
            "type": "string"
          },
          "archivedDate": {
            "pattern": "((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9]{2})|([1-9][0-9]{3}))-((0[1-9])|(1[012]))-((0[1-9])|([12][0-9])|(3[01]))",
            "type": "string"
          },
          "page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Q1_PageType"
            },
            "description": ""
          }
        },
        "description": ""
      },
      "Q1_PageType": {
        "title": "Q1_PageType",
        "required": [
          "pageNo",
          "pageExt",
          "pageContent"
        ],
        "type": "object",
        "properties": {
          "pageNo": {
            "minimum": 0.0,
            "type": "integer",
            "format": "int32"
          },
          "pageExt": {
            "type": "string"
          },
          "pageContent": {
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_BillCycle": {
        "title": "Q1_BillCycle",
        "enum": [
          "New",
          "XXX",
          "YYY"
        ],
        "type": "string",
        "description": "Valid Values : New, XXX, YYY"
      },
      "Q1_Flag": {
        "title": "Q1_Flag",
        "enum": [
          "Y",
          "N"
        ],
        "type": "string",
        "description": "Valid Values : Y or N"
      },
      "Q1_OfferToTag": {
        "title": "Q1_OfferToTag",
        "enum": [
          "Yes",
          "No"
        ],
        "type": "string",
        "description": ""
      },
      "Q1_CustomerId": {
        "title": "Q1_CustomerId",
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minimum": 0.0,
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_CustomerId2": {
        "title": "Q1_CustomerId2",
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_Parameter": {
        "title": "Q1_Parameter",
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_TransactionType": {
        "title": "Q1_TransactionType",
        "enum": [
          "BIANNUALCYCLE",
          "TODAY",
          "CYCLETODATE",
          "CTD"
        ],
        "type": "string",
        "description": "Valid values are BIANNUALCYCLE, TODAY,\n\t\t\t\tCYCLETODATE, CTD etc"
      },
      "Q1_BeneficiaryId": {
        "title": "Q1_BeneficiaryId",
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minimum": 0.0,
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_DeviceDetails": {
        "title": "Q1_DeviceDetails",
        "required": [
          "machineNonce",
          "sequenceNonce",
          "machineLabel",
          "machineProperties",
          "createDate",
          "lastUsedDate",
          "expiryDate"
        ],
        "type": "object",
        "properties": {
          "machineNonce": {
            "minLength": 1,
            "type": "string"
          },
          "sequenceNonce": {
            "minLength": 1,
            "type": "string"
          },
          "machineLabel": {
            "type": "string"
          },
          "machineProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_MachineProperties"
              }
            ]
          },
          "createDate": {
            "pattern": "((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9]{2})|([1-9][0-9]{3}))-((0[1-9])|(1[012]))-((0[1-9])|([12][0-9])|(3[01]))",
            "type": "string"
          },
          "lastUsedDate": {
            "pattern": "((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9]{2})|([1-9][0-9]{3}))-((0[1-9])|(1[012]))-((0[1-9])|([12][0-9])|(3[01]))",
            "type": "string"
          },
          "expiryDate": {
            "pattern": "((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9]{2})|([1-9][0-9]{3}))-((0[1-9])|(1[012]))-((0[1-9])|([12][0-9])|(3[01]))",
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_AuthenticationDeviceDetails": {
        "title": "Q1_AuthenticationDeviceDetails",
        "required": [
          "machineNonce",
          "sequenceNonce",
          "machineLabel",
          "machineProperties"
        ],
        "type": "object",
        "properties": {
          "machineNonce": {
            "minLength": 1,
            "type": "string"
          },
          "sequenceNonce": {
            "minLength": 1,
            "type": "string"
          },
          "machineLabel": {
            "type": "string"
          },
          "machineProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_MachineProperties"
              }
            ]
          }
        },
        "description": ""
      },
      "Q1_MachineProperties": {
        "title": "Q1_MachineProperties",
        "required": [
          "applicationData"
        ],
        "type": "object",
        "properties": {
          "applicationData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Q1_ApplicationData"
            },
            "description": ""
          }
        },
        "description": ""
      },
      "Q1_ApplicationData": {
        "title": "Q1_ApplicationData",
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_AuthenticationInfo": {
        "title": "Q1_AuthenticationInfo",
        "required": [
          "methods"
        ],
        "type": "object",
        "properties": {
          "methods": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_Methods"
              }
            ]
          }
        },
        "description": ""
      },
      "Q1_Methods": {
        "title": "Q1_Methods",
        "required": [
          "hardToken",
          "softToken",
          "siteImage",
          "trustedPC",
          "callerId",
          "oneTimePass"
        ],
        "type": "object",
        "properties": {
          "hardToken": {
            "type": "boolean"
          },
          "softToken": {
            "type": "boolean"
          },
          "siteImage": {
            "type": "boolean"
          },
          "trustedPC": {
            "type": "boolean"
          },
          "callerId": {
            "type": "boolean"
          },
          "oneTimePass": {
            "type": "boolean"
          }
        },
        "description": ""
      },
      "Q1_TokenDetails": {
        "title": "Q1_TokenDetails",
        "required": [
          "userId",
          "userName",
          "userGroup",
          "vendorId",
          "serialNumber",
          "tokenType",
          "signatureSupported",
          "loadDate",
          "lastUsedDate"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "minLength": 1,
            "type": "string"
          },
          "userName": {
            "minLength": 1,
            "type": "string"
          },
          "userGroup": {
            "minLength": 1,
            "type": "string"
          },
          "vendorId": {
            "type": "string"
          },
          "serialNumber": {
            "type": "string"
          },
          "tokenType": {
            "type": "string"
          },
          "signatureSupported": {
            "type": "boolean"
          },
          "loadDate": {
            "pattern": "((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9]{2})|([1-9][0-9]{3}))-((0[1-9])|(1[012]))-((0[1-9])|([12][0-9])|(3[01]))",
            "type": "string"
          },
          "lastUsedDate": {
            "pattern": "((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9]{2})|([1-9][0-9]{3}))-((0[1-9])|(1[012]))-((0[1-9])|([12][0-9])|(3[01]))",
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_AccountDetails": {
        "title": "Q1_AccountDetails",
        "required": [
          "accountId",
          "balance",
          "overdraft",
          "balanceSAR",
          "availableSAR",
          "averageLastSixMonths",
          "isoCurrencyCode",
          "division",
          "statusCode",
          "accountType",
          "glClassificationCode"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "maxLength": 24,
            "minLength": 14,
            "pattern": "([0-9]{14})|(SA[0-9]{4}[a-zA-Z0-9]{18})",
            "type": "string"
          },
          "balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_Money"
              }
            ]
          },
          "overdraft": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_Money"
              }
            ]
          },
          "balanceSAR": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_Money"
              }
            ]
          },
          "availableSAR": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_Money"
              }
            ]
          },
          "averageLastSixMonths": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_Money"
              }
            ]
          },
          "isoCurrencyCode": {
            "pattern": "[A-Z]{3,3}",
            "type": "string"
          },
          "division": {
            "type": "string"
          },
          "statusCode": {
            "maxLength": 3,
            "type": "string"
          },
          "accountType": {
            "maxLength": 4,
            "type": "string"
          },
          "glClassificationCode": {
            "maxLength": 40,
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_Gender": {
        "title": "Q1_Gender",
        "enum": [
          "M",
          "F"
        ],
        "type": "string",
        "description": "Valid values are : M , F etc"
      },
      "Q1_trueOrFalseType": {
        "title": "Q1_trueOrFalseType",
        "enum": [
          "true",
          "false",
          "True",
          "False"
        ],
        "type": "string",
        "description": "Valid values are : true, false, True, False"
      },
      "Q1_trueOrFalseTypeOptional": {
        "title": "Q1_trueOrFalseTypeOptional",
        "enum": [
          "true",
          "false",
          "True",
          "False"
        ],
        "type": "string",
        "description": "Optional.\n\t\t\t\tValid values are : true, false, True,\n\t\t\t\tFalse etc"
      },
      "Q1_YorNType": {
        "title": "Q1_YorNType",
        "enum": [
          "Y",
          "N"
        ],
        "type": "string",
        "description": "Valid values are : Y, N"
      },
      "Q1_YorNTypeOptional": {
        "title": "Q1_YorNTypeOptional",
        "enum": [
          "Y",
          "N"
        ],
        "type": "string",
        "description": "Optional.\n\t\t\t\tValid values are : Y, N"
      },
      "Q1_contactlessIndicatorTypeOptional": {
        "title": "Q1_contactlessIndicatorTypeOptional",
        "enum": [
          "Y",
          "N",
          "V"
        ],
        "type": "string",
        "description": "Optional.\n\t\t\t\tValid values are : Y, N, V"
      },
      "Q1_CustomerChannelType": {
        "title": "Q1_CustomerChannelType",
        "enum": [
          "BOTH",
          "MOBILE",
          "AOL"
        ],
        "type": "string",
        "description": ""
      },
      "Q1_ErrorCategoryType": {
        "title": "Q1_ErrorCategoryType",
        "enum": [
          "BUSINESS",
          "SYSTEM"
        ],
        "type": "string",
        "description": ""
      },
      "Q1_CommonServiceFaultType": {
        "title": "Q1_CommonServiceFaultType",
        "required": [
          "category",
          "code",
          "message",
          "detail"
        ],
        "type": "object",
        "properties": {
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_ErrorCategoryType"
              }
            ]
          },
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_ServicesStatusType": {
        "title": "Q1_ServicesStatusType",
        "enum": [
          "ACTIVE",
          "DISABLE_USER",
          "DISABLE_ADMIN",
          "DELETED"
        ],
        "type": "string",
        "description": ""
      },
      "Q1_ServiceLevelType": {
        "title": "Q1_ServiceLevelType",
        "enum": [
          "INQUIRY",
          "FULL"
        ],
        "type": "string",
        "description": ""
      },
      "Q1_CustomerStatusType": {
        "title": "Q1_CustomerStatusType",
        "required": [
          "userId",
          "aol",
          "mobile",
          "emergencyCash"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "aol": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_AolStatusType"
              }
            ]
          },
          "mobile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_MobileStatusType"
              }
            ]
          },
          "emergencyCash": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_EmergencyCashStatus"
              }
            ]
          }
        },
        "description": ""
      },
      "Q1_AolStatusType": {
        "title": "Q1_AolStatusType",
        "required": [
          "createdBy",
          "createdDate",
          "lastLoginDate",
          "serviceLevel",
          "serviceStatus",
          "passwordRevoked"
        ],
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "pattern": "(((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9]{2})|([1-9][0-9]{3}))-((0[1-9])|(1[012]))-((0[1-9])|([12][0-9])|(3[01]))T([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9].[0-9])|()|(((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9]{2})|([1-9][0-9]{3}))-((0[1-9])|(1[012]))-((0[1-9])|([12][0-9])|(3[01]))T([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9])",
            "type": "string"
          },
          "lastLoginDate": {
            "pattern": "(((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9]{2})|([1-9][0-9]{3}))-((0[1-9])|(1[012]))-((0[1-9])|([12][0-9])|(3[01]))T([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9].[0-9])|()|(((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9]{2})|([1-9][0-9]{3}))-((0[1-9])|(1[012]))-((0[1-9])|([12][0-9])|(3[01]))T([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9])",
            "type": "string"
          },
          "serviceLevel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_ServiceLevelType"
              }
            ]
          },
          "serviceStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_ServicesStatusType"
              }
            ]
          },
          "passwordRevoked": {
            "type": "boolean"
          }
        },
        "description": ""
      },
      "Q1_MobileStatusType": {
        "title": "Q1_MobileStatusType",
        "required": [
          "registeredBy",
          "registeredDate",
          "lastLoginDate",
          "serviceLevel",
          "serviceStatus"
        ],
        "type": "object",
        "properties": {
          "registeredBy": {
            "type": "string"
          },
          "registeredDate": {
            "pattern": "(((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9]{2})|([1-9][0-9]{3}))-((0[1-9])|(1[012]))-((0[1-9])|([12][0-9])|(3[01]))T([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9].[0-9])|()|(((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9]{2})|([1-9][0-9]{3}))-((0[1-9])|(1[012]))-((0[1-9])|([12][0-9])|(3[01]))T([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9])",
            "type": "string"
          },
          "lastLoginDate": {
            "pattern": "(((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9]{2})|([1-9][0-9]{3}))-((0[1-9])|(1[012]))-((0[1-9])|([12][0-9])|(3[01]))T([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9].[0-9])|()|(((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9]{2})|([1-9][0-9]{3}))-((0[1-9])|(1[012]))-((0[1-9])|([12][0-9])|(3[01]))T([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9])",
            "type": "string"
          },
          "serviceLevel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_ServiceLevelType"
              }
            ]
          },
          "serviceStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_ServicesStatusType"
              }
            ]
          }
        },
        "description": ""
      },
      "Q1_EmergencyCashStatus": {
        "title": "Q1_EmergencyCashStatus",
        "required": [
          "registrationDate",
          "status"
        ],
        "type": "object",
        "properties": {
          "registrationDate": {
            "pattern": "(((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9]{2})|([1-9][0-9]{3}))-((0[1-9])|(1[012]))-((0[1-9])|([12][0-9])|(3[01]))T([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9].[0-9])|()|(((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9]{2})|([1-9][0-9]{3}))-((0[1-9])|(1[012]))-((0[1-9])|([12][0-9])|(3[01]))T([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9])",
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_TransactionInfo": {
        "title": "Q1_TransactionInfo",
        "required": [
          "transactionType"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string"
          },
          "relatedTransactionId": {
            "type": "string"
          },
          "transactionType": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_ClientInfo": {
        "title": "Q1_ClientInfo",
        "required": [
          "clientId"
        ],
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_SecurityInfo": {
        "title": "Q1_SecurityInfo",
        "required": [
          "username",
          "password"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_CreationInfo": {
        "title": "Q1_CreationInfo",
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "branch": {
            "maxLength": 5,
            "type": "string"
          },
          "institution": {
            "maxLength": 3,
            "type": "string"
          },
          "teller": {
            "maxLength": 8,
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_RequestHeader": {
        "title": "Q1_RequestHeader",
        "type": "object",
        "properties": {
          "transactionInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_TransactionInfo"
              }
            ]
          },
          "clientInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_ClientInfo"
              }
            ]
          },
          "securityInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_SecurityInfo"
              }
            ]
          },
          "creationInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_CreationInfo"
              }
            ]
          }
        },
        "description": ""
      },
      "Q1_ErrorInfo": {
        "title": "Q1_ErrorInfo",
        "required": [
          "level"
        ],
        "type": "object",
        "properties": {
          "level": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_level"
              }
            ]
          },
          "code": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_ReplyHeader": {
        "title": "Q1_ReplyHeader",
        "type": "object",
        "properties": {
          "transactionInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_TransactionInfo"
              }
            ]
          },
          "clientInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_ClientInfo"
              }
            ]
          },
          "errorInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Q1_ErrorInfo"
              }
            ]
          }
        },
        "description": ""
      },
      "EncryptMessageRequest": {
        "title": "EncryptMessageRequest",
        "required": [
          "EncryptMessageRequest"
        ],
        "type": "object",
        "properties": {
          "EncryptMessageRequest": {
            "$ref": "#/components/schemas/tns_EncryptMessageRequest"
          }
        }
      },
      "EncryptMessageResponse": {
        "title": "EncryptMessageResponse",
        "required": [
          "EncryptMessageResponse"
        ],
        "type": "object",
        "properties": {
          "EncryptMessageResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/tns_EncryptMessageResponse"
              }
            ]
          }
        }
      },
      "GenerateUniqueReferenceRequest": {
        "title": "GenerateUniqueReferenceRequest",
        "required": [
          "GenerateUniqueReferenceRequest"
        ],
        "type": "object",
        "properties": {
          "GenerateUniqueReferenceRequest": {
            "$ref": "#/components/schemas/tns_GenerateUniqueReferenceRequest"
          }
        }
      },
      "GenerateUniqueReferenceResponse": {
        "title": "GenerateUniqueReferenceResponse",
        "required": [
          "GenerateUniqueReferenceResponse"
        ],
        "type": "object",
        "properties": {
          "GenerateUniqueReferenceResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/tns_GenerateUniqueReferenceResponse"
              }
            ]
          }
        }
      },
      "GetDigitalSignatureRequest": {
        "title": "GetDigitalSignatureRequest",
        "required": [
          "GetDigitalSignatureRequest"
        ],
        "type": "object",
        "properties": {
          "GetDigitalSignatureRequest": {
            "$ref": "#/components/schemas/GetDigitalSignatureRequestType"
          }
        }
      },
      "GetDigitalSignatureResponse": {
        "title": "GetDigitalSignatureResponse",
        "required": [
          "GetDigitalSignatureResponse"
        ],
        "type": "object",
        "properties": {
          "GetDigitalSignatureResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetDigitalSignatureResponseType"
              }
            ]
          }
        }
      },
      "header_authenticationType": {
        "title": "header_authenticationType",
        "enum": [
          "NONE",
          "OTP",
          "TOKEN"
        ],
        "type": "string",
        "description": ""
      },
      "Q1_level": {
        "title": "Q1_level",
        "enum": [
          "SUCCESS",
          "WARNING",
          "FAILURE"
        ],
        "type": "string",
        "description": ""
      },
      "AppearanceType": {
        "title": "tns_appearanceType",
        "enum": [
          "RUN_DIRECTION_LTR",
          "RUN_DIRECTION_RTL"
        ],
        "type": "string",
        "description": ""
      },
      "BackgroundImageType": {
        "title": "BackgroundImage",
        "enum": [
          "NO_IMAGE",
          "EMDHA_LOGO",
          "CUSTOM_LOGO"
        ],
        "type": "string",
        "description": ""
      },
      "CoordinatesType": {
        "title": "tns_coordinates",
        "enum": [
          "TopLeft",
          "TopMiddle",
          "CenterLeft",
          "CenterMiddle",
          "CenterRight",
          "BottomLeft",
          "BottomMiddle",
          "BottomRight"
        ],
        "type": "string",
        "description": ""
      },
      "PageTobeSignedType": {
        "title": "pageTobeSigned",
        "enum": [
          "All",
          "Even",
          "Odd",
          "Last",
          "First",
          "PageLevel",
          "Specify"
        ],
        "type": "string",
        "description": ""
      },
      "wsse_UsernameToken": {
        "title": "wsse_UsernameToken",
        "required": [
          "Username",
          "Password"
        ],
        "type": "object",
        "properties": {
          "Username": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          }
        },
        "description": ""
      },
      "Q1_AmountOptional": {
        "oneOf": [
          {
            "type": "number"
          },
          {
            "type": "string"
          }
        ]
      }
    },
    "securitySchemes": {
      "mwsecurity": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "mwsecurity": []
    }
  ],
  "tags": [
    {
      "name": "Crypto APIs",
      "description": ""
    }
  ]
}